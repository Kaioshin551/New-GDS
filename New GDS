import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Plane, Clock, RefreshCw, AlertCircle, DollarSign,
  Calendar, MapPin, Users, Search, Filter, Tag
} from 'lucide-react';

const ModernGDS = () => {
  const [searchParams, setSearchParams] = useState({
    origin: '',
    destination: '',
    departDate: '',
    returnDate: '',
    passengers: 1,
    fareClass: 'economy',
    fareType: 'public' // public, corporate, negotiated
  });

  const [fareResults, setFareResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(new Date().toISOString());

  // Simulate ATPCO fare data
  const mockATPCOData = [
    {
      id: 'F1',
      carrier: 'American Airlines',
      origin: 'JFK',
      destination: 'LAX',
      fareClass: 'economy',
      baseFare: 299.00,
      fareCode: 'WE7NA',
      cabinCode: 'Y',
      fareRules: {
        advancePurchase: '7 days',
        minStay: 'None',
        maxStay: '30 days',
        refundable: false,
        changeFee: 200.00
      },
      taxes: [
        { code: 'US', amount: 28.60 },
        { code: 'XF', amount: 4.50 },
        { code: 'ZP', amount: 8.20 }
      ],
      surcharges: {
        fuel: 120.00,
        seasonal: 0
      },
      lastUpdated: new Date().toISOString()
    },
    {
      id: 'F2',
      carrier: 'Delta Air Lines',
      origin: 'JFK',
      destination: 'LAX',
      fareClass: 'economy',
      baseFare: 319.00,
      fareCode: 'VE14NR',
      cabinCode: 'Y',
      fareRules: {
        advancePurchase: '14 days',
        minStay: 'Saturday night',
        maxStay: '60 days',
        refundable: true,
        changeFee: 0
      },
      taxes: [
        { code: 'US', amount: 28.60 },
        { code: 'XF', amount: 4.50 },
        { code: 'ZP', amount: 8.20 }
      ],
      surcharges: {
        fuel: 110.00,
        seasonal: 25.00
      },
      lastUpdated: new Date().toISOString()
    }
  ];

  // Simulate real-time ATPCO updates
  useEffect(() => {
    const interval = setInterval(() => {
      if (fareResults.length > 0) {
        const updatedResults = fareResults.map(fare => ({
          ...fare,
          baseFare: fare.baseFare * (0.98 + Math.random() * 0.04), // Small price fluctuations
          lastUpdated: new Date().toISOString()
        }));
        setFareResults(updatedResults);
        setLastUpdate(new Date().toISOString());
      }
    }, 60000); // Update every minute

    return () => clearInterval(interval);
  }, [fareResults]);

  const calculateTotalFare = (fare) => {
    const taxTotal = fare.taxes.reduce((sum, tax) => sum + tax.amount, 0);
    const surchargeTotal = fare.surcharges.fuel + fare.surcharges.seasonal;
    return fare.baseFare + taxTotal + surchargeTotal;
  };

  const handleSearch = () => {
    setLoading(true);
    // Simulate ATPCO API call
    setTimeout(() => {
      setFareResults(mockATPCOData);
      setLoading(false);
    }, 1500);
  };

  return (
    <div className="w-full max-w-4xl mx-auto p-4">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle className="text-2xl font-bold flex items-center gap-2">
              <DollarSign className="w-6 h-6" />
              ATPCO Fare Search
              {loading && <RefreshCw className="w-4 h-4 text-blue-500 animate-spin" />}
            </CardTitle>
          </div>
          <CardDescription>
            Real-time fare data via ATPCO
            <div className="text-xs text-gray-500 mt-1">
              Last updated: {new Date(lastUpdate).toLocaleString()}
            </div>
          </CardDescription>
        </CardHeader>

        <CardContent>
          {/* Search Form */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <MapPin className="w-5 h-5 text-gray-500" />
                <input
                  type="text"
                  placeholder="Origin (e.g., JFK)"
                  className="w-full p-2 border rounded"
                  value={searchParams.origin}
                  onChange={(e) => setSearchParams({...searchParams, origin: e.target.value})}
                />
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-5 h-5 text-gray-500" />
                <input
                  type="date"
                  className="w-full p-2 border rounded"
                  value={searchParams.departDate}
                  onChange={(e) => setSearchParams({...searchParams, departDate: e.target.value})}
                />
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <MapPin className="w-5 h-5 text-gray-500" />
                <input
                  type="text"
                  placeholder="Destination (e.g., LAX)"
                  className="w-full p-2 border rounded"
                  value={searchParams.destination}
                  onChange={(e) => setSearchParams({...searchParams, destination: e.target.value})}
                />
              </div>
              <div className="flex items-center space-x-2">
                <Tag className="w-5 h-5 text-gray-500" />
                <select
                  className="w-full p-2 border rounded"
                  value={searchParams.fareType}
                  onChange={(e) => setSearchParams({...searchParams, fareType: e.target.value})}
                >
                  <option value="public">Public Fares</option>
                  <option value="corporate">Corporate Fares</option>
                  <option value="negotiated">Negotiated Fares</option>
                </select>
              </div>
            </div>

            <div className="md:col-span-2">
              <button
                className="w-full bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
                onClick={handleSearch}
              >
                <Search className="w-5 h-5" />
                Search Fares
              </button>
            </div>
          </div>

          {/* Fare Results */}
          {loading ? (
            <Alert className="bg-blue-50">
              <AlertCircle className="w-4 h-4" />
              <AlertDescription>
                Fetching real-time fare data from ATPCO...
              </AlertDescription>
            </Alert>
          ) : (
            <div className="space-y-4">
              {fareResults.map((fare) => (
                <Card key={fare.id} className="p-4 hover:shadow-md transition-shadow">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <div className="font-bold text-lg">{fare.carrier}</div>
                      <div className="text-sm text-gray-500">
                        Fare Code: {fare.fareCode} | Cabin: {fare.cabinCode}
                      </div>
                      <div className="mt-2">
                        <div className="font-semibold">Fare Rules:</div>
                        <ul className="text-sm text-gray-600">
                          <li>Advance Purchase: {fare.fareRules.advancePurchase}</li>
                          <li>Min Stay: {fare.fareRules.minStay}</li>
                          <li>Changes: ${fare.fareRules.changeFee}</li>
                        </ul>
                      </div>
                    </div>
                    
                    <div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-green-600">
                          ${calculateTotalFare(fare).toFixed(2)}
                        </div>
                        <div className="text-sm text-gray-500">
                          Base Fare: ${fare.baseFare.toFixed(2)}
                        </div>
                        <div className="text-sm text-gray-500">
                          Taxes & Fees: ${fare.taxes.reduce((sum, tax) => sum + tax.amount, 0).toFixed(2)}
                        </div>
                        <div className="text-sm text-gray-500">
                          Surcharges: ${(fare.surcharges.fuel + fare.surcharges.seasonal).toFixed(2)}
                        </div>
                      </div>
                      <div className="mt-4 text-right">
                        <button className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
                          Select Fare
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-2 text-xs text-gray-400 flex items-center gap-1">
                    <Clock className="w-3 h-3" />
                    Fare last updated: {new Date(fare.lastUpdated).toLocaleString()}
                  </div>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ModernGDS;
